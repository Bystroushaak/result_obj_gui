#! /usr/bin/env python3
import sqlite3
import argparse

import justpy as jp

from utils import str_from_ts
from utils import html_from_ts


def generate_report(sqlite_path):
    wp = jp.WebPage(delete_flag=False)
    div_container = jp.Div(
        a=jp.Div(a=wp, classes="md:container md:mx-auto"),
        classes="min-h-screen flex flex-row bg-gray-100",
    )

    db = sqlite3.connect(sqlite_path)
    db.row_factory = sqlite3.Row

    div_content = jp.Div(classes="p-3 w-full")
    sections_iterator = _generate_sections(div_content, db)
    div_navigation = _add_navigation(sections_iterator)

    div_container.add(div_navigation)
    div_container.add(div_content)

    return lambda: wp


def _generate_sections(div_content, db):
    _add_title_section(div_content)

    yield _add_overview_section(div_content, db)


def _add_overview_section(div_content, db):
    section_overview = _get_section(div_content, "Overview")

    cursor = db.cursor()
    cursor.execute("SELECT * FROM Metadata ORDER BY timestamp")
    metadata_list = cursor.fetchall()

    metadata_start = metadata_list[0]
    metadata_end = metadata_list[-1]

    start_ts = metadata_start['timestamp']
    end_ts = metadata_end['timestamp']
    jp.P(
        a=section_overview,
        inner_html=f"Started: {html_from_ts(start_ts)}.",
    )
    jp.P(
        a=section_overview,
        inner_html=f"Ended: {html_from_ts(end_ts)}.",
    )
    jp.P(
        a=section_overview,
        inner_html=f"Duration: <em>{end_ts - start_ts:.2}</em> seconds.",
    )
    jp.P(
        a=section_overview,
        text=f"Command: {metadata_start['argv']}",
    )
    jp.P(
        a=section_overview,
        text=f"Directory: {metadata_start['pwd']}",
    )

    cursor.execute("SELECT key, value FROM MetadataEnvVars ORDER BY key")
    env_var_list = cursor.fetchall()

    jp.P(
        a=section_overview,
        text=f"Env variables:",
    )

    table = jp.Table(a=section_overview)
    for env_var in env_var_list:
        tr = jp.Tr(a=table)
        jp.Td(a=tr, text=env_var["key"])
        jp.Td(a=tr, text=env_var["value"])

    return section_overview


def _add_title_section(div_content):
    section_title = jp.Section(a=div_content)
    h1 = jp.H1(a=section_title, classes="text-2xl p-4 text-center")
    h1.add(jp.Code(text="result_obj"))
    h1.add(jp.Span(text=" info"))


def _get_section(div_content, name):
    section_id = name.replace(" ", "-")
    section = jp.Section(
        a=div_content,
        id=section_id,
        classes="overflow-hidden rounded-lg shadow-md bg-white hover:shadow-xl transition-shadow duration-300 ease-in-out p-4",
    )
    section.add(jp.H3(classes="text-xl font-semibold pb-3", text=name))

    return section


def _add_navigation(items):
    div = jp.Div()
    div_ul_container = jp.Div(
        a=div,
        classes="sticky top-0 mt-20 w-32 pl-3 pt-2 ml-2 text-sm rounded-lg shadow-md bg-white",
    )

    ul = jp.Ul(a=div_ul_container, classes="nav")

    for section in items:
        link = "#" + section.id
        name = section.components[0].text

        li = jp.Li(a=ul, classes="py-1")
        jp.A(a=li, classes="nav-link", href=link, text=name)  # , scroll=True

    return div


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="""Web interface for the `result_obj` project \
                       https://github.com/Bystroushaak/result_obj"""
    )
    parser.add_argument("SQLITE", help="Path to the SQLite generated by `obj_result`.")
    args = parser.parse_args()

    jp.justpy(generate_report(args.SQLITE))
